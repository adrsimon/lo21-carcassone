@startuml
hide circle


class Jeu<Singleton> {
  joueurs : list[Joueur]
  joueurCourant : Joueur
  tuilesRestantes : list[Tuiles]
  nombreJoueurs : int
}

class Pioche {
  -nbTuilesMax: int
  -nbTuilesRiviereMax: int
  -nbTuiles: int
  -nbTuilesMax: int
  -tuilesRiviere: List[Tuile]
  -tuiles: List[Tuile]
  .. Getters ..
  + estVide() : boolean
  + getNbTuiles() : int
  .. Setters ..
}

class Plateau<Singleton> {
  -xmax : int
  -ymax : int
  -groupements : list[Groupement]
  -plateau: Tuile[xmax][ymax]
  +ajouterTuile(Tuile t)
  +PlacerTuile(Tuile t)
  +EtendrePlateau()
  +testCompletGroupement() : boolean
  +testCompletAutre() : boolean
  +donnerpPoints(Joueur p)
  +bordsAtteints()
}

class Joueur {
  -hasBigMeeple: boolean
  -abbe : boolean
  -nbMeeple : int
  -id : int
  -score : int
  .. Getters ..
  +getBigMeeple() : boolean
  +getAbbe() : boolean
  +getNbMeeple() : int
  +getId() : int
  +getScore() : int
  .. Setters ..
  +setAbbe(bool b)
  +setBigMeeple(bool b)
  +setScore(int s)
  +setMeeple(int m)
}

class Tuile {
  -position : Position
  -id : int
  -hasMonastere : boolean
  -hasJardin : boolean
  elements: List[Element]
  .. Getters ..
  + getEelement()
  .. Setters ..
  + updatePosition(Position p)
  + changerOrientation()
}

class Position {
  -x : int
  -y : int
  .. Getters ..
  +getPositionX()
  +getPositionY()
  .. Setters ..
  +setPosition(int x, int y)
  .. Operators ..
  + operator==
  + operator<<
}

class Element {
  -type : int/enum
  -groupement : Groupement
  -orientation : int
  -position : position
  -hasMeeple: boolean
  -orientation: char[4] [N, S, W, E]
  -position: position
  -blason: boolean
  .. Getters ..
  +getOrientation()
  +getPosition()
  +getBlason()
  .. Setters ..
  +updatePosition(Position p)
  +updateGroupement(Groupement p)
}

class Groupement<Iterator> {
  -id : int
  -complete : boolean
  iterator : Iterator
  elements : list[Element]
  joueurs: list[Joueur]
  .. Getters ..
  + getPoint()
  + getID()
  + getMeeple()
  + getType()
  .. Setters ..
  + updateMeepl()
}

class GroupementRoute {
  nbSegments : int
  nbAuberges : int
}

class GroupementVille {
  nbSegments : int
  nbBlasons : int
}

class GroupementPre {
  nbSegments : int
}

class GroupementAbbaye {
  nbCases : int
}

class GroupementJardin {
  nbCases : int
}

Jeu "1" *-- "2..6" Joueur
Jeu "1" *- "1" Plateau

Plateau "1" *- "*" Tuile
Tuile "1" *- "1" Position
Position "1" --* "1" Element

Element "*" --* "1" GroupementPre
Element "*" --* "1" GroupementVille
Element "*" --* "1" GroupementJardin
Element "*" --* "1" GroupementRoute
Element "*" --* "1" GroupementAbbaye

GroupementPre .. Groupement : herits
GroupementVille .. Groupement : herits
GroupementJardin .. Groupement : herits
GroupementRoute .. Groupement : herits
GroupementAbbaye .. Groupement : herits

@enduml
